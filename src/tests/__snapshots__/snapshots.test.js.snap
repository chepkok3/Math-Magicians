// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot Test for Math Magicians project Snapshot needs to be equal as component render 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="sc-bcXHqe cbwUgO"
      >
        <h2
          class="sc-gswNZR LBOu"
        >
          Welcome to our page
        </h2>
        <div
          class="sc-dkrFOg jhbjQS"
        >
           
          <h2>
            Fan Facts
          </h2>
          <h3>
            Zero is an even number.
          </h3>
          For some of us, this may be a “yes I know” fact, but for a lot of people this is not something they have ever thought about. For clarity, a good definition of an even number is as follows: a number is said to be even if, when divided by 2, it remains a whole number. Zero fits this perfectly since 0/2 = 0.
          <br />
          <h3>
            There is exactly 10! seconds in 6 weeks.
          </h3>
          For those who are unaware, for any positive integer n, n!, read as “n factorial”, represents the product of all positive integers less than or equal to n. So, for example, 5! = 5 × 4 × 3 × 2 × 1.
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="sc-bcXHqe cbwUgO"
    >
      <h2
        class="sc-gswNZR LBOu"
      >
        Welcome to our page
      </h2>
      <div
        class="sc-dkrFOg jhbjQS"
      >
         
        <h2>
          Fan Facts
        </h2>
        <h3>
          Zero is an even number.
        </h3>
        For some of us, this may be a “yes I know” fact, but for a lot of people this is not something they have ever thought about. For clarity, a good definition of an even number is as follows: a number is said to be even if, when divided by 2, it remains a whole number. Zero fits this perfectly since 0/2 = 0.
        <br />
        <h3>
          There is exactly 10! seconds in 6 weeks.
        </h3>
        For those who are unaware, for any positive integer n, n!, read as “n factorial”, represents the product of all positive integers less than or equal to n. So, for example, 5! = 5 × 4 × 3 × 2 × 1.
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Snapshot Test for Math Magicians project Snapshot needs to be equal as component render 2`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="quote-body"
      >
        <p>
          Mathematics is not about numbers, equations, computations
          <br />
          or algorithms: it is about understanding.-William Paul Thurston
        </p>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="quote-body"
    >
      <p>
        Mathematics is not about numbers, equations, computations
        <br />
        or algorithms: it is about understanding.-William Paul Thurston
      </p>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`Snapshot Test for Math Magicians project Snapshot needs to be equal as component render 3`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <h1
        class="do-math"
      >
        Let's do some math!
      </h1>
      <section
        class="calculator"
      >
        <div
          class="container"
        >
          <input
            class="input"
            type="text"
            value="0"
          />
          <button
            class="button"
            type="button"
          >
            AC
          </button>
          <button
            class="button"
            type="button"
          >
            +/-
          </button>
          <button
            class="button"
            type="button"
          >
            %
          </button>
          <button
            class="button operator"
            type="button"
          >
            ÷
          </button>
          <button
            class="button number"
            type="button"
          >
            7
          </button>
          <button
            class="button number"
            type="button"
          >
            8
          </button>
          <button
            class="button number"
            type="button"
          >
            9
          </button>
          <button
            class="button operator"
            type="button"
          >
            x
          </button>
          <button
            class="button number"
            type="button"
          >
            4
          </button>
          <button
            class="button number"
            type="button"
          >
            5
          </button>
          <button
            class="button number"
            type="button"
          >
            6
          </button>
          <button
            class="button operator"
            type="button"
          >
            -
          </button>
          <button
            class="button number"
            type="button"
          >
            1
          </button>
          <button
            class="button number"
            type="button"
          >
            2
          </button>
          <button
            class="button number"
            type="button"
          >
            3
          </button>
          <button
            class="button operator"
            type="button"
          >
            +
          </button>
          <button
            class="button zero"
            type="button"
          >
            0
          </button>
          <button
            class="button number"
            type="button"
          >
            .
          </button>
          <button
            class="button operator"
            type="button"
          >
            =
          </button>
        </div>
      </section>
    </div>
  </body>,
  "container": <div>
    <h1
      class="do-math"
    >
      Let's do some math!
    </h1>
    <section
      class="calculator"
    >
      <div
        class="container"
      >
        <input
          class="input"
          type="text"
          value="0"
        />
        <button
          class="button"
          type="button"
        >
          AC
        </button>
        <button
          class="button"
          type="button"
        >
          +/-
        </button>
        <button
          class="button"
          type="button"
        >
          %
        </button>
        <button
          class="button operator"
          type="button"
        >
          ÷
        </button>
        <button
          class="button number"
          type="button"
        >
          7
        </button>
        <button
          class="button number"
          type="button"
        >
          8
        </button>
        <button
          class="button number"
          type="button"
        >
          9
        </button>
        <button
          class="button operator"
          type="button"
        >
          x
        </button>
        <button
          class="button number"
          type="button"
        >
          4
        </button>
        <button
          class="button number"
          type="button"
        >
          5
        </button>
        <button
          class="button number"
          type="button"
        >
          6
        </button>
        <button
          class="button operator"
          type="button"
        >
          -
        </button>
        <button
          class="button number"
          type="button"
        >
          1
        </button>
        <button
          class="button number"
          type="button"
        >
          2
        </button>
        <button
          class="button number"
          type="button"
        >
          3
        </button>
        <button
          class="button operator"
          type="button"
        >
          +
        </button>
        <button
          class="button zero"
          type="button"
        >
          0
        </button>
        <button
          class="button number"
          type="button"
        >
          .
        </button>
        <button
          class="button operator"
          type="button"
        >
          =
        </button>
      </div>
    </section>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
